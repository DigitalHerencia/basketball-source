// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id            String   @id @default(cuid())
  name          String
  position      String?
  height        String?
  weight        String?
  birthDate     DateTime?
  birthPlace    String?
  college       String?
  draftYear     Int?
  draftRound    Int?
  draftNumber   Int?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  teams         PlayerTeam[]
  stats         PlayerStats[]
  games         PlayerGameStats[]
}

model Team {
  id            String   @id @default(cuid())
  name          String
  abbreviation  String   @unique
  city          String
  conference    String?
  division      String?
  founded       Int?
  arena         String?
  championships Int[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  players       PlayerTeam[]
  homeGames     Game[]    @relation("HomeTeam")
  awayGames     Game[]    @relation("AwayTeam")
  seasons       TeamSeason[]
}

model PlayerTeam {
  id            String   @id @default(cuid())
  player        Player   @relation(fields: [playerId], references: [id])
  playerId      String
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        String
  jerseyNumber  String?
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([playerId, teamId, startDate])
}

model Season {
  id            String   @id @default(cuid())
  year          String   @unique
  startDate     DateTime
  endDate       DateTime?
  league        String   // NBA, WNBA, ABA, etc.
  champion      String?
  mvp           String?
  finalsMvp     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  games         Game[]
  teamSeasons   TeamSeason[]
  playerStats   PlayerStats[]
}

model TeamSeason {
  id            String   @id @default(cuid())
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        String
  season        Season   @relation(fields: [seasonId], references: [id])
  seasonId      String
  wins          Int      @default(0)
  losses        Int      @default(0)
  rank          Int?
  playoffSeed   Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([teamId, seasonId])
}

model PlayerStats {
  id            String   @id @default(cuid())
  player        Player   @relation(fields: [playerId], references: [id])
  playerId      String
  season        Season   @relation(fields: [seasonId], references: [id])
  seasonId      String
  gamesPlayed   Int      @default(0)
  gamesStarted  Int      @default(0)
  minutes       Float    @default(0)
  points        Float    @default(0)
  rebounds      Float    @default(0)
  assists       Float    @default(0)
  steals        Float    @default(0)
  blocks        Float    @default(0)
  turnovers     Float    @default(0)
  fieldGoalsMade Float   @default(0)
  fieldGoalsAttempted Float @default(0)
  threePointersMade Float @default(0)
  threePointersAttempted Float @default(0)
  freeThrowsMade Float   @default(0)
  freeThrowsAttempted Float @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([playerId, seasonId])
}

model Game {
  id            String   @id @default(cuid())
  date          DateTime
  homeTeam      Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId    String
  awayTeam      Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId    String
  homeScore     Int?
  awayScore     Int?
  season        Season   @relation(fields: [seasonId], references: [id])
  seasonId      String
  status        String   // Scheduled, In Progress, Final
  arena         String?
  attendance    Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  playerStats   PlayerGameStats[]
  
  @@unique([homeTeamId, awayTeamId, date])
}

model PlayerGameStats {
  id            String   @id @default(cuid())
  player        Player   @relation(fields: [playerId], references: [id])
  playerId      String
  game          Game     @relation(fields: [gameId], references: [id])
  gameId        String
  minutes       Int      @default(0)
  points        Int      @default(0)
  rebounds      Int      @default(0)
  assists       Int      @default(0)
  steals        Int      @default(0)
  blocks        Int      @default(0)
  turnovers     Int      @default(0)
  fieldGoalsMade Int     @default(0)
  fieldGoalsAttempted Int @default(0)
  threePointersMade Int  @default(0)
  threePointersAttempted Int @default(0)
  freeThrowsMade Int     @default(0)
  freeThrowsAttempted Int @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([playerId, gameId])
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String   @default("user") // user, admin
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ScrapeLog {
  id            String   @id @default(cuid())
  source        String   // URL or source identifier
  type          String   // player, team, game, etc.
  status        String   // success, error
  message       String?
  itemsProcessed Int     @default(0)
  startTime     DateTime @default(now())
  endTime       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

